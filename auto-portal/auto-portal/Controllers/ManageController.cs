using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.Owin;
using Microsoft.Owin.Security;
using auto_portal.Models;

namespace auto_portal.Controllers
{
    [Authorize]
    public class ManageController : Controller
    {
        private ApplicationSignInManager _signInManager;
        private ApplicationUserManager _userManager;

        public ManageController()
        {
        }

        public ManageController(ApplicationUserManager userManager, ApplicationSignInManager signInManager)
        {
            UserManager = userManager;
            SignInManager = signInManager;
        }

        public ApplicationSignInManager SignInManager
        {
            get
            {
                return _signInManager ?? HttpContext.GetOwinContext().Get<ApplicationSignInManager>();
            }
            private set 
            { 
                _signInManager = value; 
            }
        }

        public ApplicationUserManager UserManager
        {
            get
            {
                return _userManager ?? HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>();
            }
            private set
            {
                _userManager = value;
            }
        }

        //
        // GET: /Manage/Index
        public async Task<ActionResult> Index()
        {
            if(Request.IsAuthenticated)
            {
                var userId = User.Identity.GetUserId();
                var user = await UserManager.FindByIdAsync(userId);

                var model = new AccountManagementViewModel
                {
                    FirstName = user.UserData.FirstName,
                    LastName = user.UserData.LastName,
                    CodeAndCity = user.UserData.CodeAndCity,
                    AvatarPath = user.UserData.AvatarPath,
                    Registers = user.Registers.ToList(),
                    Nickname = user.UserName,
                    Email = user.Email
                };
                return View(model);
            }

            else
            {
                return RedirectToAction("Index", "Home");
            }
        }


        public ActionResult EditUserData()
        {
            var userId = User.Identity.GetUserId();
            var user = UserManager.FindByIdAsync(userId);

            var model = new AccountManagementViewModel
            {
                FirstName = user.Result.UserData.FirstName,
                LastName = user.Result.UserData.LastName,
                CodeAndCity = user.Result.UserData.CodeAndCity,
                AvatarPath = user.Result.UserData.AvatarPath,
                IsAdmin = UserManager.IsInRole(userId, "Administrator"),
            };
            return View(model);
        }

       

        [ValidateAntiForgeryToken]
        [HttpPost]
        public async Task<ActionResult> EditUserData(AccountManagementViewModel vm, HttpPostedFileBase avatar)
        {
            if (ModelState.IsValid)
            {
                var user = await UserManager.FindByIdAsync(User.Identity.GetUserId());
                var avatarPath = UploadPhoto(avatar, user.UserData.AvatarPath);
                user.UserData.AvatarPath = avatarPath;
                vm.AvatarPath = avatarPath;
                user.UserData.FirstName = vm.FirstName;
                user.UserData.LastName = vm.LastName;
                user.UserData.CodeAndCity = vm.CodeAndCity;

                var result = await UserManager.UpdateAsync(user);
                if (result.Succeeded)
                {
                    return View(vm);
                }
            }
            return View(vm);
        }

        //upload photo method. source: stackoverflow.com
        private string UploadPhoto(HttpPostedFileBase file, string avatarPath)
        {
            if (file == null) return "nofile.png";

            if (System.IO.File.Exists(Request.MapPath(avatarPath)))
            {
                System.IO.File.Delete(Request.MapPath(avatarPath));
            }

            var fileName = Path.GetFileName(file.FileName);
            fileName = Regex.Replace(fileName, @"\s+", "");
            var rondom = Guid.NewGuid() + fileName;
            var path = Path.Combine(Server.MapPath("~/Content/Images/UserPhotos"), rondom);
            var pathToSave = "~/Content/Images/UserPhotos/" + rondom;
            file.SaveAs(path);

            return pathToSave;
        }

        [ChildActionOnly]
        public PartialViewResult ChangePasswordFeed()
        {
            return PartialView("_ChangePassword", new ChangePasswordViewModel());
        }

        //
        // POST: /Manage/ChangePassword
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> ChangePassword(ChangePasswordViewModel model)
        {
            var actualUser = await UserManager.FindByIdAsync(User.Identity.GetUserId());
            var vm = new AccountManagementViewModel
            {
                FirstName = actualUser.UserData.FirstName,
                LastName = actualUser.UserData.LastName,
                CodeAndCity = actualUser.UserData.CodeAndCity,
                AvatarPath = actualUser.UserData.AvatarPath,
                IsAdmin = await UserManager.IsInRoleAsync(User.Identity.GetUserId(), "Administrator"),
                ChangePasswordViewModel = model
            };

            if (!ModelState.IsValid)
            {
                return View("EditUserData", vm);
            }
            var result = await UserManager.ChangePasswordAsync(User.Identity.GetUserId(), model.OldPassword, model.NewPassword);
            if (result.Succeeded)
            {
                TempData["Success"] = "Pomyślnie zmieniono hasło.";
                return View("EditUserData", vm);
            }
            TempData["Failure"] = "Niepoprawne hasło.";
            return View("EditUserData", vm);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && _userManager != null)
            {
                _userManager.Dispose();
                _userManager = null;
            }

            base.Dispose(disposing);
        }

#region Helpers
        // Used for XSRF protection when adding external logins
        private const string XsrfKey = "XsrfId";

        private IAuthenticationManager AuthenticationManager
        {
            get
            {
                return HttpContext.GetOwinContext().Authentication;
            }
        }

        private void AddErrors(IdentityResult result)
        {
            foreach (var error in result.Errors)
            {
                ModelState.AddModelError("", error);
            }
        }

        private bool HasPassword()
        {
            var user = UserManager.FindById(User.Identity.GetUserId());
            if (user != null)
            {
                return user.PasswordHash != null;
            }
            return false;
        }

        private bool HasPhoneNumber()
        {
            var user = UserManager.FindById(User.Identity.GetUserId());
            if (user != null)
            {
                return user.PhoneNumber != null;
            }
            return false;
        }

        public enum ManageMessageId
        {
            AddPhoneSuccess,
            ChangePasswordSuccess,
            SetTwoFactorSuccess,
            SetPasswordSuccess,
            RemoveLoginSuccess,
            RemovePhoneSuccess,
            Error
        }

#endregion
    }
}