using auto_portal.Models;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Web;

namespace auto_portal.DAL
{
    public class AutoPortalContext : IdentityDbContext<ApplicationUser>
    {
        public DbSet<Vehicle> Vehicles { get; set; }
        public DbSet<VehicleRegister> VehicleRegisters { get; set; }
        public DbSet<News> News { get; set; }
        public DbSet<Defect> Defects { get; set; }
        public DbSet<Opinion> Opinions { get; set; }

        public AutoPortalContext()
        {
            Database.SetInitializer(new AutoPortalDBInitializer());
        }
        public static AutoPortalContext Create()
        {
            return new AutoPortalContext();
        }
    }

    public class AutoPortalDBInitializer : DropCreateDatabaseIfModelChanges<AutoPortalContext>
    {
        protected override void Seed(AutoPortalContext context)
        {
            base.Seed(context);
            Vehicle vehicle1 = new Vehicle
            {
                Id = 0,
                Producer = "Volkswagen",
                Model = "Golf",
                ProductionYears = new int[] { 1998, 1999, 2000, 2001, 2002, 2003, 2004 },
                Engine = "1.6 SR"
            };

            context.Vehicles.Add(vehicle1);

            context.SaveChanges();

            var userManager = new UserManager<ApplicationUser>(new UserStore<ApplicationUser>(context));
            var roleManager = new RoleManager<IdentityRole>(new RoleStore<IdentityRole>(context));

            const string name = "admin@autoportal.pl";
            const string password = "P@ssw0rd";
            const string roleName = "Administrator";


            var user = userManager.FindByName(name);
            if (user == null)
            {
                user = new ApplicationUser { UserName = name, Email = name, UserData = new UserData() };
                var result = userManager.Create(user, password);
                result = userManager.SetLockoutEnabled(user.Id, false);
            }

            //Create Role Admin if it does not exist
            var role = roleManager.FindByName(roleName);
            if (role == null)
            {
                role = new IdentityRole(roleName);
                var roleresult = roleManager.Create(role);
            }

            //var user = userManager.FindByName(name);
            //if (user == null)
            //{
            //    user = new ApplicationUser { UserName = name, Email = name };
            //    var result = userManager.Create(user, password);
            //    result = userManager.SetLockoutEnabled(user.Id, false);
            //}

            // Add user admin to Role Admin if not already added
            var rolesForUser = userManager.GetRoles(user.Id);
            if (!rolesForUser.Contains(role.Name))
            {
                var result = userManager.AddToRole(user.Id, role.Name);



                context.SaveChanges();
            }
        }
    }
}